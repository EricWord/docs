[TOC]

# 1. 整体概述

## 1.1 项目整体架构

### 1.1.1 架构图

![image-20210705174020862](images/image-20210705174020862.png)

项目是前后端分离开发，分为内网部署和外网部署，所谓外网部署就是面向公众访问的，主要是部署前端项目(PC、移动端)，内网部署是整个后台的服务集群。用户都是通过客户端来访问后端服务，一个完整的请求流程:客户端的请求首先来到Nginx集群，Nginx将请求转发给API网关，网关使用的是SpringCloud Gateway，使用SpringCloud进行动态路由，使用Ribbon进行负载均衡，使用Sentinel进行熔断降级，此外还使用网关进行认证授权、令牌限流。各个微服务基于SpringBoot构建，使用Feign完成服务之间的调用，考虑到有些请求需要登录以后才能处理，所以采用了OAth2.0认证中心，除了有一般的登录还支持社交账号登录，整个应用里安全以及权限控制使用SpringSerurity实现。服务中用到的缓存使用的是Redis集群(Sentinel+Shard),数据持久化使用的是MySQL。服务与服务之间采用RabbitMQ进行异步解耦以及完成分布式事务的最终一致性。全文检索使用的是ElasticSearch。对于一些图片、视频的存储采用的是阿里云OSS服务。在项目上线后为了快速定位项目中可能出现的一些问题，使用了ELK来对日志进行相关的处理，使用LogStash收集业务日志，存储在ES中，然后使用Kibana可视化界面从ES中检索出相关的日志信息以便快速定位线上问题。在分布式系统中由于每个服务可能部署了多台机器并且服务与服务之间存在相互调用，所以项目中采用了Nacos作为注册中心，同时采用Nacos作为配置中心来集中管理配置。使用Sleuth+Zipkin来做服务追踪，将每个服务的信息交给Prometheus进行聚合，使用Grafana进行可视化展示，通过Altermanager实时接收服务的报警信息。此外项目提供了持续集成和持续部署(CI/CD),开发人员可以将代码提交到github,运维人员可以通过自动化工具Jenkins从github中获取到代码，将其打包成docker镜像，然后使用K8s集成docker服务。

### 1.1.2 微服务划分图

![image-20210706111607546](images/image-20210706111607546.png)



## 1.2 项目背景

### 1.2.1 电商模式

市面上有5种常见的电商模式B2B、B2C、C2B、C2C、O2O

1. B2B模式

   B2B(Business to Business)是指商家与商家建立的商业关系。如:阿里巴巴

2. B2C模式

   B2C(Business to Consumer)就是我们经常看到的供应商直接把商品卖给用户，即"商对客"模式，也就是通常说的商业零售，直接面向消费者销售产品和服务。如:苏宁易购、京东、天猫、小米商城

3. C2B模式

   C2B(Customer to Business),即消费者对企业。先有消费者需求产生而后有企业生产，即先有消费者提出需求，后有生产企业按需求组织生产

4. C2C模式

   C2C(Customer to Consumer),客户之间自己把东西放网上去卖，如：淘宝，咸鱼

5. O2O模式

   O2O(Online to Offline)，将线下商务的机会与互联网结合在一起，让互联网成为线下交易的前台。线上快速支付，线下优质服务。如:饿了么，美团，淘票票，京东到家

   

   

   

## 1.3 项目技术&特色

- 前后端分离开发，并开发基于VUE的后台管理系统
- SpringCloud全新的解决方案
- 应用监控、限流、网关、熔断降级等分布式方案全方位涉及
- 透彻讲解分布式事务、分布式锁等分布式系统的难点
- 分析高并发场景的编码方式，线程池，异步编排等使用
- 压力测试与性能优化
- 各种集群技术的区别以及使用
- CI/CD使用
- ...

# 2. 分布式基础概念

## 2.1 微服务

微服务架构风格，就像是把一个单独的应用程序开发为一套小服务，每个小服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP API。这些服务围绕业务能力来构建，并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。

简而言之:拒绝大型单体应用，基于业务边界进行服务微化拆分，各个服务独立部署运行

## 2.2 集群&分布式&节点

集群是个物理形态，分布式是个工作方式

只要是一堆机器，就可以叫集群，它们是不是一起协作着工作，这个谁也不知道

《分布式系统原理与范型》定义:

"分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统"

分布式系统(distributed system)是建立在网络之上的软件系统

分布式是将不同的业务分布在不同的地方

集群指的是将几台服务器集中在一起，实现同一个业务

例如:京东是一个分布式系统，众多业务运行在不同的机器，所有业务构成一个大型的业务集群。每一个小的业务，比如用户系统，访问压力大的时候一台服务器是不够的。我们就应该将用户系统部署到多个服务器，也就是每一个业务系统也可以做集群化

分布式的每一个节点都可以做集群，而集群并不一定就是分布式的

节点:集群中的一个服务器

## 2.3 远程调用

在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要相互调用，我们称为远程调用

SpringCloud中使用HTTP+JSON的方式完成远程调用

![image-20210706101505863](images/image-20210706101505863.png)

## 2.4 负载均衡

![image-20210706101605913](images/image-20210706101605913.png)

分布式系统中，A服务需要调用B服务，B服务在多台机器中都存在，A调用任意一个服务器均可完成功能

为了使每一个服务器都不要太忙或者太闲，我们可以负载均衡的调用每一个服务器，提升网站的健壮性

**常见的负载均衡算法:**

- 轮询

  为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直到最后一个，然后循环

- 最小连接

  优先选择连接数最小，也就是压力最小的后端服务器，在会话较长的情况下可以考虑采取这种方式

- 散列

  根据请求源的IP的散列(hash)来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。如果应用需要处理状态而要求用户能连接到和之前相同的服务器，可以考虑采取这种方式。

   

## 2.5 服务注册/发现&注册中心

A服务调用B服务，A服务并不知道B服务当前在哪几台服务器有，哪些是正常的，哪些服务已经下线。解决这个问题可以引入注册中心。

![image-20210706102517199](images/image-20210706102517199.png)

如果某些服务下线，其他人可以实时地感知到其他服务的状态，从而避免调用不可用的服务

## 2.6 配置中心

![image-20210706102739647](images/image-20210706102739647.png)

每一个服务最终都有大量的配置，并且每个服务都可能部署在多态机器上。我们经常需要变更配置，可以让每个服务在配置中心获取自己的配置

**配置中心用来集中管理微服务的配置信息**

## 2.7 服务熔断&服务降级

在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时，有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。

![image-20210706103348304](images/image-20210706103348304.png)

### 2.7.1 服务熔断

设置服务的超时，当被调用的服务经常失败到某个阈值，可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据

### 2.7.2 服务降级

在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级:某些服务不处理或者简单处理(抛出异常、返回null、调用mock数据、调用Fallback处理逻辑)

## 2.8 API网关

在微服务架构中，API Gateway作为整体架构的重要组件，它抽象了微服务中都需要的公共功能，同时提供了客户端负载均衡、服务自动熔断、灰度发布、统一认证、限流流控、日志统计等丰富的功能，帮助我们解决很多API管理难题

![image-20210706104057413](images/image-20210706104057413.png)





# 3. 开发环境搭建

## 3.1 安装Linux虚拟机



## 3.2 安装Docker



## 3.3 Docker安装MySQL

### 3.3.1 下载镜像文件

```bash
docker pull mysql:5.7
```

### 3.3.2 创建实例并启动

![image-20210706120348659](images/image-20210706120348659.png)



## 3.4 Docker安装Redis

### 3.4.1 下载镜像文件

```bash
docker pull redis
```

### 3.4.2 创建实例并启动

![image-20210706121437880](images/image-20210706121437880.png)



## 3.5 开发环境统一

该看14

## 3.6 创建项目微服务







   